<?phpnamespace FangCaoDi\Resource;use App\Models\Group\Store;use Carbon\Carbon;use Illuminate\Console\Command;use Illuminate\Support\Collection;use Illuminate\Support\Facades\Artisan;use Illuminate\Support\Facades\Cache;use Illuminate\Support\Facades\Log;use Illuminate\Support\Facades\Storage;use League\Flysystem\Filesystem;use League\Flysystem\Sftp\SftpAdapter;class FangCaoDiOrderPush extends Command{    use CommonTrait;    const DISK = 'fcd_ftp';    /**     * The name and signature of the console command.     *     * @var string     */    protected $signature = 'FangCaoDi:Order-push {store=all : The ID of the store.} 							{--date=yesterday : The date of the orders to generate.}							{--auto : Is auto push.}';    /**     * The console command description.     *     * @var string     */    protected $description = 'Push files to FangCaoDi Order system.';    /**     * @var Factory     */    protected $factory;    /**     * @var PushLog     */    protected $log;    /**     * Create a new command instance.     *     * @return void     */    public function __construct()    {        parent::__construct();    }    /**     * @throws \Exception     */    public function handle()    {        $this->setDate();        //集体抛送        foreach ($this->getStoreConfig() as $store_id => $shop_info) {            $store = Store::find($store_id);            if (is_null($store)) {                continue;            }            $this->factory = new FangCaoDiController($this->date, $store, $shop_info);            $path = storage_path() . '/' . $shop_info['shop_id'] . $this->date->format('Ymd') . '.txt';            $name = $shop_info['shop_id'] . $this->date->format('Ymd') . '.txt';//            file_put_contents($path, $this->factory->generateFile());            $content = $this->factory->generateFile();            $this->push($name,$content, $store);        }    }    protected function push($name,$content, $store)    {        $is_auto = $this->option('auto');        if ($is_auto) {            //自动抛送            if (Cache::get('order_uploading_' . $store->id)) {                Log::info('订单正在上传中');                return ['message' => 'faild'];            }        }        try {            Cache::put('order_uploading_' . $store->id, true, 30);//            config('filesystems.disks.'.self::DISK.'.host',$this->config('store_shop_ids')[$store->id]['url']);//            config('filesystems.disks.'.self::DISK.'.port',$this->config('store_shop_ids')[$store->id]['port']);//            config('filesystems.disks.'.self::DISK.'.username',$this->config('store_shop_ids')[$store->id]['username']);//            config('filesystems.disks.'.self::DISK.'.password',$this->config('store_shop_ids')[$store->id]['password']);//            dd(Storage::disk(self::DISK)->put('/uploads', $path));            $this->upload($name,$content, $store);            Log::info('已抛送');        } catch (\Exception $exception) {            Cache::forget('order_uploading_' . $store->id);            throw $exception;        }    }    protected function upload($name,$content, $store)    {        $filesystem = new Filesystem(new SftpAdapter([            'host' => $this->config('store_shop_ids')[$store->id]['url'],            'port' => $this->config('store_shop_ids')[$store->id]['port'],            'username' => $this->config('store_shop_ids')[$store->id]['username'],            'password' => $this->config('store_shop_ids')[$store->id]['password'],            'root' => '/upload',            'timeout' => 10,        ]));        dd($filesystem->put($name, $content));    }}